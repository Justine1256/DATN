"use client";

import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import Image from "next/image";
// import ProductComments from "./ProductCommernt";
import BestSelling from "../home/BestSelling";
import Cookies from "js-cookie";
import ShopInfo from "./ShopInfo";
import LoadingProductDetail from "../loading/loading";
import ProductDescriptionAndSpecs from "./ProductDescriptionAndSpecs";
import { FaStar, FaRegStar, FaStarHalfAlt } from "react-icons/fa";
import { API_BASE_URL } from '@/utils/api';
// ‚úÖ Interface ƒë·ªãnh nghƒ©a d·ªØ li·ªáu s·∫£n ph·∫©m
interface Product {
  id: number;
  name: string;
  price: number;
  sale_price?: number;
  description: string;
  image: string;
  images?: string[];
  option1?: string;
  value1?: string;
  option2?: string;
  value2?: string;
  stock?: number;
  rating: string;
  shop_slug: string;
  shop?: {
    id: number;
    name: string;
    description: string;
    logo: string;
    phone: string;
    rating: string;
    total_sales: number;
    created_at: string;
    status: "activated" | "pending" | "suspended";
    email: string;
    slug: string;
  };
}

// ‚úÖ Props cho component ProductDetail
interface ProductDetailProps {
  shopslug: string;
  productslug: string;
}

// ‚úÖ Component chi ti·∫øt s·∫£n ph·∫©m
export default function ProductDetail({
  shopslug,
  productslug,
}: ProductDetailProps) {
  const router = useRouter();
  const [product, setProduct] = useState<Product | null>(null);
  const [quantity, setQuantity] = useState(1);
  const [mainImage, setMainImage] = useState("");
  const [selectedColor, setSelectedColor] = useState("");
  const [selectedSize, setSelectedSize] = useState("");
  const [liked, setLiked] = useState(false);
  const [followed, setFollowed] = useState(false);
  const [showPopup, setShowPopup] = useState(false);
  const [popupText, setPopupText] = useState("");

  const handleAddToCart = async () => {
    const token = localStorage.getItem("token") || Cookies.get("authToken");
    if (!token) {
      setPopupText("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m v√†o gi·ªè h√†ng");
      setShowPopup(true);
      setTimeout(() => setShowPopup(false), 2000);
      return;
    }

    try {
      const res = await fetch(`${API_BASE_URL}/cart`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          product_id: product?.id,
          quantity: quantity,
          color: selectedColor,
          size: selectedSize,
        }),
      });

      if (res.ok) {
        setPopupText("ƒê√£ th√™m v√†o gi·ªè h√†ng!");
      } else {
        const data = await res.json();
        setPopupText(data.message || "Th√™m v√†o gi·ªè h√†ng th·∫•t b·∫°i");
      }
    } catch (err) {
      console.error("‚ùå L·ªói add to cart:", err);
      setPopupText("C√≥ l·ªói x·∫£y ra");
    } finally {
      setShowPopup(true);
      setTimeout(() => setShowPopup(false), 2000);
    }
  };

  // ch·∫°y song song api
  useEffect(() => {
    const fetchData = async () => {
      try {
        const token = localStorage.getItem("token") || Cookies.get("authToken");
        const productRes = await fetch(
          `${ API_BASE_URL }/${shopslug}/product/${productslug}`
        );

        if (!productRes.ok) {
          router.push("/not-found");
          return;
        }

        const productData = await productRes.json();

        if (!productData.images) {
          productData.images = ["/1.png", "/2.webp", "/3.webp", "/4.webp"];
        }

        // C·∫≠p nh·∫≠t s·∫£n ph·∫©m + ·∫£nh ch√≠nh + option m·∫∑c ƒë·ªãnh
        setProduct(productData);
        console.log("üì¶ Chi ti·∫øt s·∫£n ph·∫©m:", productData);

        setMainImage(
          productData.image.startsWith("/")
            ? productData.image
            : `/${productData.image}`
        );
        setSelectedColor(productData.value1?.split(",")[0] || "");
        setSelectedSize(productData.value2?.split(",")[0] || "");

        // N·∫øu c√≥ token v√† shop id th√¨ g·ªçi song song
        if (token && productData.shop?.id) {
          const followRes = await fetch(
            `${API_BASE_URL}/shops/${productData.shop.id}/is-following`,
            {
              headers: {
                Authorization: `Bearer ${token}`,
              },
            }
          );

          if (followRes.ok) {
            const followData = await followRes.json();
            setFollowed(followData.followed);
          }
        }
      } catch (err) {
        console.error("‚ùå L·ªói khi load product & follow:", err);
      }
    };

    fetchData();
  }, [shopslug, productslug, router]);

  // ‚úÖ X·ª≠ l√Ω theo d√µi shop
  const handleFollow = async () => {
    const token = localStorage.getItem("token") || Cookies.get("authToken");

    if (!token) {
      setPopupText("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ theo d√µi shop");
      setShowPopup(true);
      setTimeout(() => setShowPopup(false), 2000);
      return;
    }

    if (!product?.shop?.id) return;

    try {
      const shopId = product.shop.id;

      if (followed) {
        // UNFOLLOW
        const res = await fetch(
          `${ API_BASE_URL } /shops/${shopId}/unfollow`,
          {
            method: "DELETE",
            headers: {
              Authorization: `Bearer ${token}`,
              Accept: "application/json",
            },
          }
        );

        if (res.ok) {
          setFollowed(false);
        } else {
          const data = await res.json();
          console.error("‚ùå L·ªói unfollow:", data.message || res.statusText);
        }
      } else {
        // FOLLOW
        const res = await fetch(
          `${API_BASE_URL}/shops/${shopId}/follow`,
          {
            method: "POST",
            headers: {
              Authorization: `Bearer ${token}`,
              Accept: "application/json",
            },
          }
        );

        if (res.ok) {
          setFollowed(true);
        } else {
          const data = await res.json();
          console.error("‚ùå L·ªói follow:", data.message || res.statusText);
        }
      }
    } catch (err) {
      console.error("‚ùå L·ªói x·ª≠ l√Ω follow/unfollow:", err);
    }
  };

  useEffect(() => {
    const checkFollowStatus = async () => {
      const token = localStorage.getItem("token") || Cookies.get("authToken");
      if (!token || !product?.shop?.id) return;

      try {
        const res = await fetch(
          `${API_BASE_URL}/shops/${product.shop?.id}/is-following`,
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );

        if (res.ok) {
          const data = await res.json();
          setFollowed(data.followed); // C·∫≠p nh·∫≠t tr·∫°ng th√°i ban ƒë·∫ßu
        }
      } catch (err) {
        console.error("‚ùå L·ªói ki·ªÉm tra follow status:", err);
      }
    };

    checkFollowStatus();
  }, [product]);

  // ‚úÖ X·ª≠ l√Ω th√™m/b·ªè y√™u th√≠ch s·∫£n ph·∫©m
  const toggleLike = async () => {
    if (!product) return;
    const token = localStorage.getItem("token") || Cookies.get("authToken");
    if (!token) {
      setShowPopup(true);
      setTimeout(() => setShowPopup(false), 2000);
      return;
    }

    const newLiked = !liked;
    setLiked(newLiked);

    try {
      if (newLiked) {
        await fetch(`${API_BASE_URL}/wishlist`, {
          method: "POST",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ product_id: product.id }),
        });
      } else {
        await fetch(`${ API_BASE_URL } /wishlist/${product.id}`, {
          method: "DELETE",
          headers: { Authorization: `Bearer ${token}` },
        });
      }
    } catch (err) {
      console.error("‚ùå L·ªói x·ª≠ l√Ω wishlist:", err);
    } finally {
      setShowPopup(true);
      setTimeout(() => setShowPopup(false), 2000);
    }
  };
  if (!product) return <LoadingProductDetail />;

  // ‚úÖ Danh s√°ch thumbnail ·∫£nh
  const thumbnails = product.images?.map((img) =>
    img.startsWith("/") ? img : `/${img}`
  ) || [`/${product.image}`];
  const colorOptions = product.value1?.split(",") || [];
  const sizeOptions = product.value2?.split(",") || [];

  return (
    <div className="max-w-screen-xl mx-auto px-4 pt-[80px] pb-10 relative">
      {/* ‚úÖ B·ªçc ·∫£nh + info trong c√πng 1 box tr·∫Øng vi·ªÅn ƒë·∫πp */}
      <div className="rounded-xl border shadow-sm bg-white p-10">
        <div className="grid grid-cols-1 md:grid-cols-12 gap-10 items-start">
          {/* ‚úÖ H√¨nh ·∫£nh s·∫£n ph·∫©m b√™n tr√°i */}
          <div className="md:col-span-6 flex flex-col gap-4">
            <div className="flex justify-center items-center w-full bg-gray-100 rounded-lg p-6 min-h-[220px]">
              <div className="w-full max-w-[400px] h-[320px] relative">
                <Image
                  src={mainImage}
                  alt={product.name}
                  fill
                  className="object-contain rounded-lg"
                  key={mainImage}
                />
              </div>
            </div>

            {/* ‚úÖ Thumbnail n·∫±m ngang b√™n d∆∞·ªõi */}
            <div className="flex justify-center gap-3">
              {thumbnails.map((thumb, idx) => (
                <div
                  key={idx}
                  onClick={() => setMainImage(thumb)}
                  className={`cursor-pointer border-2 rounded overflow-hidden w-[80px] h-[80px] ${mainImage === thumb ? "border-[#DC4B47]" : "border-gray-300"
                    }`}
                >
                  <Image
                    src={thumb}
                    alt={`Thumb ${idx}`}
                    width={80}
                    height={80}
                    className="object-contain w-full h-full"
                  />
                </div>
              ))}
            </div>
          </div>

          {/* ‚úÖ Th√¥ng tin s·∫£n ph·∫©m b√™n ph·∫£i */}
          <div className="md:col-span-6 space-y-6 ">
            <h1 className="text-[1.5rem] md:text-[2rem] font-bold text-gray-900">
              {product.name}
            </h1>
            {/* ‚úÖ rating */}
            <div className="flex items-center gap-3 text-sm -translate-y-4">
              <div className="flex items-center gap-3 text-sm ">
                <div className="flex items-center gap-2 text-base">
                  {/* ‚≠ê S·ªë sao (hi·ªÉn th·ªã th·∫≠p ph√¢n, ƒë√£ chia 2 n·∫øu c·∫ßn) */}
                  <span className="text-gray-800 flex items-center">
                    {(parseFloat(product.rating) / 2).toFixed(1)}
                  </span>

                  {/* ‚≠ê Icon sao (5 ng√¥i sao, t√≠nh theo rating / 2) */}
                  <div className="flex items-center">
                    {Array.from({ length: 5 }).map((_, i) =>
                      i < Math.round(parseFloat(product.rating) / 2) ? (
                        <FaStar key={i} className="text-yellow-400" />
                      ) : (
                        <FaRegStar key={i} className="text-gray-300" />
                      )
                    )}
                  </div>
                </div>
              </div>


              <span className="text-gray-500">(150 L∆∞·ª£t Xem)</span>
              <span className="text-gray-300">|</span>
              <span className="text-emerald-400 font-medium">
                H√†ng trong kho: {product.stock || 0} s·∫£n ph·∫©m
              </span>
            </div>
            {/* ‚úÖ gi√° */}
            <div className="flex items-center gap-3 -translate-y-6">
              <span className="text-[1.25rem] md:text-[1.5rem] font-bold text-[#DC4B47]">
                {Number(product.sale_price || product.price).toLocaleString(
                  "vi-VN"
                )}
                ‚Ç´
              </span>
              {product.sale_price && (
                <span className="line-through text-gray-400 text-sm ">
                  {Number(product.price).toLocaleString("vi-VN")}‚Ç´
                </span>
              )}
            </div>
            {/* ‚úÖ m√¥ t·∫£ */}
            <p
              className="text-gray-600 text-sm md:text-base truncate max-w-[300px] -translate-y-8"
              title={product.description}
            >
              {product.description}
            </p>

            {/* ‚úÖ Options m√†u v√† size */}
            <div className="flex flex-col gap-2 -translate-y-10">
              <div className="flex items-center gap-3">
                <p className="font-medium text-gray-700 text-sm">M√†u S·∫Øc:</p>
                <div className="flex gap-1">
                  {colorOptions.map((color) => (
                    <button
                      key={color}
                      onClick={() => setSelectedColor(color)}
                      className={`w-4 h-4 rounded-full border transition ${selectedColor === color
                        ? "border-black scale-105"
                        : "border-gray-300 hover:border-black"
                        }`}
                      style={{ backgroundColor: color.toLowerCase() }}
                      title={color}
                    />
                  ))}
                </div>
              </div>

              <div className="flex items-center gap-3 ">
                <p className="font-medium text-gray-700 text-sm">K√≠ch c·ª°:</p>
                <div className="flex gap-1">
                  {sizeOptions.map((size) => (
                    <button
                      key={size}
                      onClick={() => setSelectedSize(size)}
                      className={`text-xs min-w-[28px] px-2 py-0.5 rounded border text-center font-medium transition ${selectedSize === size
                        ? "bg-black text-white border-black"
                        : "bg-white text-black border-gray-300 hover:bg-black hover:text-white"
                        }`}
                    >
                      {size}
                    </button>
                  ))}
                </div>
              </div>
            </div>

            {/* ‚úÖ S·ªë l∆∞·ª£ng v√† h√†nh ƒë·ªông */}
            <div className="flex items-center gap-3 mt-4 -translate-y-10">
              <div className="flex border rounded overflow-hidden h-[44px] w-[165px]">
                <button
                  onClick={() => setQuantity(Math.max(1, quantity - 1))}
                  className="w-[55px] text-2xl font-extrabold text-black hover:bg-[#DC4B47] hover:text-white transition"
                >
                  ‚àí
                </button>
                <span className="w-[55px] flex items-center justify-center text-base font-extrabold text-black">
                  {quantity}
                </span>
                <button
                  onClick={() => setQuantity(quantity + 1)}
                  className="w-[55px] text-2xl font-extrabold text-black hover:bg-[#DC4B47] hover:text-white transition"
                >
                  +
                </button>
              </div>

              <button className="w-[165px] h-[44px] bg-[#DC4B47] text-white text-sm md:text-base rounded hover:bg-red-600 transition font-medium">
                Mua Ngay
              </button>
              <button
                onClick={handleAddToCart}
                className="w-[165px] h-[44px] text-[#DC4B47] border border-[#DC4B47] text-sm md:text-base rounded hover:bg-[#DC4B47] hover:text-white transition font-medium"
              >
                Th√™m V√†o Gi·ªè H√†ng
              </button>

              <button
                onClick={toggleLike}
                className={`p-2 border rounded text-lg transition ${liked ? "text-[#DC4B47]" : "text-gray-400"
                  }`}
              >
                {liked ? "‚ù§Ô∏è" : "ü§ç"}
              </button>
            </div>

            {/* ‚úÖ Ch√≠nh s√°ch v·∫≠n chuy·ªÉn */}
            <div className="border rounded-lg divide-y text-sm text-gray-700 mt-6 -translate-y-11">
              <div className="flex items-center gap-3 p-4">
                <div className="flex justify-center items-center h-[40px]">
                  <Image src="/ship.png" alt="Logo" width={30} height={40} />
                </div>
                <div>
                  <p className="font-semibold">Giao h√†ng mi·ªÖn ph√≠</p>
                  <p>
                    <a className="no-underline" href="#">
                      Giao h√†ng mi·ªÖn ph√≠ t·∫°i n·ªôi th√†nh & m·ªôt s·ªë khu v·ª±c ngo·∫°i th√†nh
                    </a>
                  </p>
                </div>
              </div>

              <div className="flex items-center gap-3 p-4">
                <div className="flex justify-center items-center h-[40px]">
                  <Image src="/trahang.png" alt="Logo" width={30} height={40} />
                </div>
                <div>
                  <p className="font-semibold">Tr·∫£ h√†ng</p>
                  <p>Giao h√†ng mi·ªÖn ph√≠ trong v√≤ng 30 ng√†y.</p>
                </div>
              </div>
            </div>

          </div>
        </div>
      </div>

      {/* ‚úÖ Th√¥ng tin c·ª≠a h√†ng */}
      <ShopInfo
        shop={product.shop}
        followed={followed}
        onFollowToggle={handleFollow}
      />
      {/*t·∫°m*/}
      <ProductDescriptionAndSpecs
        breadcrumbs={[
          { name: "Trang ch·ªß", href: "/" },
          { name: "ƒêi·ªán tho·∫°i", href: "/dien-thoai" },
          { name: "Apple", href: "/dien-thoai/apple" },
          { name: "iPhone 15 Pro Max" }, // hi·ªán t·∫°i
        ]}
        specs={[
          { label: "Lo·∫°i s·∫£n ph·∫©m", value: "ƒêi·ªán tho·∫°i" },
          { label: "T√¨nh tr·∫°ng", value: "M·ªõi 100%" },
          { label: "B·∫£o h√†nh", value: "12 th√°ng to√†n qu·ªëc" },
          { label: "S·∫£n ph·∫©m c√≥ s·∫µn", value: "C√≥" },
          { label: "Th∆∞∆°ng hi·ªáu", value: "Apple" },
          { label: "Xu·∫•t x·ª©", value: "M·ªπ" },
          { label: "Dung l∆∞·ª£ng", value: "256GB" },
          { label: "G·ª≠i t·ª´", value: "TP.HCM" },
        ]}
        descriptionLines={[
          "iPhone 15 Pro Max m·ªõi nh·∫•t ch√≠nh h√£ng.",
          "M√†n h√¨nh 6.7 inch Super Retina XDR.",
          "Camera 48MP ProRAW, chip A17 Bionic.",
          "B·∫£o h√†nh 12 th√°ng to√†n qu·ªëc.",
          "H·ªó tr·ª£ ƒë·ªïi tr·∫£ trong 7 ng√†y n·∫øu c√≥ l·ªói.",
        ]}
        hashtags={[
          "iphone15promax",
          "smartphone",
          "apple",
          "dienthoai",
          "hangchinhhang",
          "baohanh12thang",
        ]}
      />

      {/* ‚úÖ B√¨nh lu·∫≠n s·∫£n ph·∫©m */}
      {/* <ProductComments shopslug={shopslug} productslug={productslug} /> */}

      {/* ‚úÖ G·ª£i √Ω s·∫£n ph·∫©m kh√°c */}
      <div className="w-full max-w-screen-xl mx-auto mt-16 px-">
        <BestSelling />
      </div>
      {/* ‚úÖ Th√¥ng b√°o th√™m/xo√° y√™u th√≠ch */}
      {showPopup && (
        <div className="fixed top-20 right-5 z-[9999] bg-white text-black text-sm px-4 py-2 rounded shadow-lg border-b-4 border-[#DC4B47] animate-slideInFade">
          {popupText ||
            (liked ? "ƒê√£ th√™m v√†o y√™u th√≠ch " : "ƒê√£ x√≥a kh·ªèi y√™u th√≠ch ")}
        </div>
      )}
    </div>
  );
}
